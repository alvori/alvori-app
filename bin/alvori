#!/usr/bin/env node

const { spawn } = require('child_process')
const webpack = require('webpack')
const path = require('path')
const fs = require('fs')
const rimraf = require('rimraf')
const program = require('commander')

const version = `Alvori App version: ${JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'))).version}`
const commands = ['dev', 'prod', 'build', '-h', '--help', '-app-v', '--app-version']
const cmd = process.argv[2]

const addServiceWorker = () => {
    if(!fs.existsSync(path.join(process.cwd(), 'src/pwa/registerServiceWorker.js'))) {
        if(!fs.existsSync(path.join(process.cwd(), 'src/pwa'))) {
            fs.mkdirSync(path.join(process.cwd(), 'src/pwa'))
        }
        fs.copyFileSync(path.join(__dirname, '../pwa/registerServiceWorker.js'), path.join(process.cwd(), 'src/pwa', 'registerServiceWorker.js'))
        fs.copyFileSync(path.join(__dirname, '../pwa/customServiceWorker.js'), path.join(process.cwd(), 'src/pwa', 'customServiceWorker.js'))
    }
}

const runDev = (args) => {
    process.env.MODE = 'development'
    process.env.BUILD_MODE = args.mode
    process.env.PWA = args.pwa
    process.env.PORT = args.port
    process.env.PWA !== 'undefined' && addServiceWorker()
    const run = spawn('node', [path.join(__dirname, '../server/devServer.js')], {
        cwd: process.cwd(),
        stdio: 'inherit',
        shell: true,
        env: process.env,
    })
    run.on('error', (error) => {
        console.error(`error: ${error.message}`)
        reject(false)
    })
}

const runProd = (args) => {
    process.env.MODE = 'production'
    process.env.BUILD_MODE = args.mode
    process.env.PWA = args.pwa
    process.env.PORT = args.port
    process.env.PWA !== 'undefined' && addServiceWorker()
    const mode = process.env.PWA !== 'undefined' ? process.env.BUILD_MODE + '-pwa' : process.env.BUILD_MODE
    const run = spawn('node', [`dist/${mode}/index.js`], {
        cwd: process.cwd(),
        stdio: 'inherit',
        shell: true,
        env: process.env,
    })
    run.on('error', (error) => {
        console.error(`error: ${error.message}`)
        reject(false)
    })
}

const runBuild = async (args) => {
    if (!args.mode) {
        args.mode = 'spa'
    }

    process.env.MODE = 'production'
    process.env.BUILD_MODE = args.mode
    process.env.PWA = args.pwa
    process.env.PWA !== 'undefined' && addServiceWorker()

    let readyPromise, distDir

    if (args.mode === 'spa') {
        const clientConfig = require('../webpack/ssr/clientConfig')({ CONFIG: 'client', ...process.env })

        distDir = path.resolve(process.cwd(), 'dist', args.pwa ? 'spa-pwa' : args.mode)

        if (fs.existsSync(distDir)) {
            rimraf(path.join(distDir), (err) => {})
        }

        const clientCompiler = webpack(clientConfig)

        clientCompiler.run()

        const build = () => {
            let clientReady = false,
                ready

            const readyPromise = new Promise((r) => {
                ready = r
            })

            const update = () => {
                if (clientReady) {
                    ready()
                }
            }

            clientCompiler.hooks.done.tap('done-compiling', ({ compilation: { errors } }) => {
                errors.forEach((err) => console.error('[Client]', err))
                if (errors.length === 0) {
                    clientReady = true
                    update()
                }
            })

            return readyPromise
        }

        readyPromise = build().then(() => {
            fs.copyFileSync(path.join(__dirname, '../spa/index.js'), path.join(distDir, 'index.js'))
        }).catch(() => {})
        
    } else if (args.mode === 'ssr') {
        let { clientConfig } = await import('../webpack/ssr/clientConfig.js')
        let { serverConfig } = await import('../webpack/ssr/serverConfig.js')
        clientConfig = clientConfig({ CONFIG: 'client', ...process.env })
        serverConfig = serverConfig({ CONFIG: 'server', ...process.env })

        distDir = serverConfig.output.path

        if (fs.existsSync(distDir)) {
            rimraf(path.join(distDir), (err) => {
                console.log(err)
            })
        }

        const clientCompiler = webpack(clientConfig)
        const serverCompiler = webpack(serverConfig)

        clientCompiler.run()
        serverCompiler.run()

        const build = () => {
            let clientReady = false,
                serverReady = false,
                ready

            const readyPromise = new Promise((r) => {
                ready = r
            })

            const update = () => {
                if (clientReady && serverReady) {
                    ready()
                }
            }

            clientCompiler.hooks.done.tap('done-compiling', ({ compilation: { errors } }) => {
                errors.forEach((err) => console.error('[Client]', err))
                if (errors.length === 0) {
                    clientReady = true
                    update()
                }
            })

            serverCompiler.hooks.done.tap('done-compiling', ({ compilation: { errors } }) => {
                errors.forEach((err) => console.error('[Server]', err))
                if (errors.length === 0) {
                    serverReady = true
                    update()
                }
            })

            return readyPromise
        }

        readyPromise = build()
    }

    const generatePackageJSON = () => {
        return new Promise((resolve, reject) => {
            const file = path.join(process.cwd(), 'package.json')

            if (fs.existsSync(file)) {
                let pkg = JSON.parse(fs.readFileSync(file))
                let newPkg = {}

                for (let k in pkg) {
                    if (k !== 'devDependencies') {
                        newPkg[k] = pkg[k]
                    }
                }
                newPkg.scripts.start = 'node index.js'
                newPkg.type = 'module'

                fs.writeFileSync(
                    `${distDir}/package.json`,
                    JSON.stringify(newPkg, null, 4),
                    'UTF-8',
                    (err) => err && console.log(err)
                )
                resolve()
            } else {
                console.log(`File preparation error: The package.json file does not exist`)
                reject()
            }
        })
    }

    readyPromise.then(() => {
        generatePackageJSON().then(() => {
            console.log(`
Project building finished!

Deploy guide: https://alvori.com/docs/deploy

Enjoy! - Alvori Team
        `)
        })
    })
}

if (commands.includes(cmd)) {
    program
        .command('dev')
        .description('Compiles and hot-reload for development')
        .option('-m, --mode [value]', 'Build mode', 'spa')
        .option('-pwa, --pwa [type]', 'Enebled PWA')
        .option('-p, --port [value]', 'App listening port', 3000)
        .action((args) => {
            runDev(args)
        })

    program
        .command('prod')
        .description('Run production build')
        .option('-m, --mode [value]', 'Build mode', 'spa')
        .option('-pwa, --pwa [type]', 'Enebled PWA')
        .option('-p, --port [value]', 'App listening port', 3000)
        .action((args) => {
            runProd(args)
        })

    program
        .command('build')
        .description('Compiles and minifies for production')
        .option('-m, --mode [value]', 'Build mode', 'spa')
        .option('-pwa, --pwa [type]', 'Enebled PWA')
        .action((args) => {
            runBuild(args)
        })

    program.option('-app-v, --app-version', 'Show app version').action((args) => console.log(version))
    program.option('-h, --help', 'Show app version').action((args) =>
        console.log(`
    Description
        Builds distributables of your app.
    Usage
        $ alvori dev [options] - Compiles and hot-reload for development
        $ alvori prod [options] - Run production build
        $ alvori build [options] - Compiles and minifies for production
    Options
        --mode [value], -m [value] - App mode [spa|ssr] (default: spa)
        --pwa, -pwa - Add PWA support in app [true|false] (default: false)
        --port [number], -p [port number] - App listening port number (default: 3000)
        --help, -h - Displays this message
        --app-version, -app-v - Displays App version
        `)
    )

    program.parse(process.argv)
}
